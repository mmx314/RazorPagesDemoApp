// Импортируем необходимые пространства имен
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using RazorPagesDemoApp.Data;
using RazorPagesDemoApp.Models.Domain;
using RazorPagesDemoApp.Models.ViewModels;

namespace RazorPagesDemoApp.Pages.Employees
{
	/*
	PageModel является базовым классом в фреймворке ASP.NET Core Razor Pages. 
	Он представляет модель страницы и предоставляет функциональность для обработки запросов и взаимодействия 
	с пользовательскими данными.

	PageModel используется для определения логики и поведения конкретной страницы веб-приложения. 
	Он содержит обработчики запросов (методы), которые выполняются при получении GET или POST запроса к странице.

	В классе PageModel определены различные методы, такие как OnGet(), OnPost(), OnGetAsync(), OnPostAsync() и другие, 
	которые можно переопределить в производном классе для обработки соответствующих типов запросов.

	PageModel также предоставляет механизм связывания данных, 
	который позволяет автоматически привязывать значения из запроса к свойствам модели страницы.

	В общем, PageModel служит в качестве контроллера для страницы в модели представления и 
	предоставляет множество удобных функций для работы с запросами, данными и 
	взаимодействия с другими компонентами веб-приложения. 
	*/
	public class AddModel : PageModel
	{
		// Создаем приватное поле для доступа к базе данных
		private readonly RazorPagesDemoDbContext dbContext;

		// Конструктор класса, принимающий контекст базы данных
		public AddModel(RazorPagesDemoDbContext dbContext)
		{
			// Присваиваем переданный контекст базы данных приватному полю
			this.dbContext = dbContext;
		}

		// Свойство для связывания модели представления AddEmployeeViewModel
		/*
		Атрибут `[BindProperty]` в C# и ASP.NET Core используется для связывания свойства модели представления с данными, полученными из запроса.

		Когда вы помечаете свойство модели представления атрибутом `[BindProperty]`, ASP.NET Core автоматически привязывает значения из запроса к этому свойству при обработке запроса. Это упрощает получение и обработку данных, отправленных из формы или встроенных в URL.

		Например, в коде:
		```csharp
		[BindProperty]
		public string Name { get; set; }
		```

		Свойство `Name` модели представления будет автоматически заполнено значением из запроса, 
		если оно присутствует и имеет соответствующее имя. Если в запросе присутствует параметр с именем `Name`, 
		его значение будет автоматически привязано к свойству `Name` модели представления.

		Атрибут `[BindProperty]` также обеспечивает двустороннюю привязку данных, 
		что означает, что изменения значения свойства модели представления будут отображаться на форме 
		или передаваться в URL при возвращении страницы клиенту.

		Этот атрибут удобен для работы с данными форм, так как он устраняет необходимость 
		явного кода для чтения и привязки значений из запроса в свойства модели представления. 
		*/
		[BindProperty]
		public AddEmployeeViewModel AddEmployeeRequest { get; set; }

		// Обработчик GET-запроса
		public void OnGet()
		{
			// В данном случае метод пуст, так как не требуется дополнительная логика при получении GET-запроса
		}

		// Обработчик POST-запроса
		public void OnPost()
		{
			/*
            //Convert ViewModel to DomainModel
            var employeeDomainModel = new Employee
            { 
                Name = 
            }
            */
		}
	}
}
